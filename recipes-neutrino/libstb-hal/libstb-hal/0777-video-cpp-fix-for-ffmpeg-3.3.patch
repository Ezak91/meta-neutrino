From 3078e1978918c5cc89a80e14a11dfd3cb424f674 Mon Sep 17 00:00:00 2001
From: Markus Volk <f_l_k@t-online.de>
Date: Wed, 20 Sep 2017 16:02:28 +0200
Subject: [PATCH 777/777] video:cpp: fix for ffmpeg 3.3

Signed-off-by: Markus Volk <f_l_k@t-online.de>
---
 generic-pc/video.cpp | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/generic-pc/video.cpp b/generic-pc/video.cpp
index bf54a27..5ddf701 100644
--- a/generic-pc/video.cpp
+++ b/generic-pc/video.cpp
@@ -283,9 +283,9 @@ void cVideo::ShowPicture(const char *fname, const char *)
 	if (avpkt.size > len)
 		lt_info("%s: WARN: pkt->size %d != len %d\n", __func__, avpkt.size, len);
 	if (got_frame) {
-		unsigned int need = avpicture_get_size(PIX_FMT_RGB32, c->width, c->height);
+		unsigned int need = avpicture_get_size(AV_PIX_FMT_RGB32, c->width, c->height);
 		struct SwsContext *convert = sws_getContext(c->width, c->height, c->pix_fmt,
-							    c->width, c->height, PIX_FMT_RGB32,
+							    c->width, c->height, AV_PIX_FMT_RGB32,
 							    SWS_BICUBIC, 0, 0, 0);
 		if (!convert)
 			lt_info("%s: ERROR setting up SWS context\n", __func__);
@@ -294,7 +294,7 @@ void cVideo::ShowPicture(const char *fname, const char *)
 			SWFramebuffer *f = &buffers[buf_in];
 			if (f->size() < need)
 				f->resize(need);
-			avpicture_fill((AVPicture *)rgbframe, &(*f)[0], PIX_FMT_RGB32,
+			avpicture_fill((AVPicture *)rgbframe, &(*f)[0], AV_PIX_FMT_RGB32,
 					c->width, c->height);
 			sws_scale(convert, frame->data, frame->linesize, 0, c->height,
 					rgbframe->data, rgbframe->linesize);
@@ -494,10 +494,10 @@ void cVideo::run(void)
 		if (avpkt.size > len)
 			lt_info("%s: WARN: pkt->size %d != len %d\n", __func__, avpkt.size, len);
 		if (got_frame) {
-			unsigned int need = avpicture_get_size(PIX_FMT_RGB32, c->width, c->height);
+			unsigned int need = avpicture_get_size(AV_PIX_FMT_RGB32, c->width, c->height);
 			convert = sws_getCachedContext(convert,
 						       c->width, c->height, c->pix_fmt,
-						       c->width, c->height, PIX_FMT_RGB32,
+						       c->width, c->height, AV_PIX_FMT_RGB32,
 						       SWS_BICUBIC, 0, 0, 0);
 			if (!convert)
 				lt_info("%s: ERROR setting up SWS context\n", __func__);
@@ -506,7 +506,7 @@ void cVideo::run(void)
 				SWFramebuffer *f = &buffers[buf_in];
 				if (f->size() < need)
 					f->resize(need);
-				avpicture_fill((AVPicture *)rgbframe, &(*f)[0], PIX_FMT_RGB32,
+				avpicture_fill((AVPicture *)rgbframe, &(*f)[0], AV_PIX_FMT_RGB32,
 						c->width, c->height);
 				sws_scale(convert, frame->data, frame->linesize, 0, c->height,
 						rgbframe->data, rgbframe->linesize);
@@ -565,7 +565,7 @@ static bool swscale(unsigned char *src, unsigned char *dst, int sw, int sh, int
 	bool ret = false;
 	struct SwsContext *scale = NULL;
 	AVFrame *sframe, *dframe;
-	scale = sws_getCachedContext(scale, sw, sh, PIX_FMT_RGB32, dw, dh, PIX_FMT_RGB32, SWS_BICUBIC, 0, 0, 0);
+	scale = sws_getCachedContext(scale, sw, sh, AV_PIX_FMT_RGB32, dw, dh, AV_PIX_FMT_RGB32, SWS_BICUBIC, 0, 0, 0);
 	if (!scale) {
 		lt_info_c("%s: ERROR setting up SWS context\n", __func__);
 		return false;
@@ -576,8 +576,8 @@ static bool swscale(unsigned char *src, unsigned char *dst, int sw, int sh, int
 		lt_info_c("%s: could not alloc sframe (%p) or dframe (%p)\n", __func__, sframe, dframe);
 		goto out;
 	}
-	avpicture_fill((AVPicture *)sframe, &(src[0]), PIX_FMT_RGB32, sw, sh);
-	avpicture_fill((AVPicture *)dframe, &(dst[0]), PIX_FMT_RGB32, dw, dh);
+	avpicture_fill((AVPicture *)sframe, &(src[0]), AV_PIX_FMT_RGB32, sw, sh);
+	avpicture_fill((AVPicture *)dframe, &(dst[0]), AV_PIX_FMT_RGB32, dw, dh);
 	sws_scale(scale, sframe->data, sframe->linesize, 0, sh, dframe->data, dframe->linesize);
  out:
 	av_frame_free(&sframe);
@@ -615,7 +615,7 @@ bool cVideo::GetScreenImage(unsigned char * &data, int &xres, int &yres, bool ge
 	}
 	if (get_osd)
 		osd = glfb->getOSDBuffer();
-	unsigned int need = avpicture_get_size(PIX_FMT_RGB32, xres, yres);
+	unsigned int need = avpicture_get_size(AV_PIX_FMT_RGB32, xres, yres);
 	data = (unsigned char *)realloc(data, need); /* will be freed by caller */
 	if (data == NULL)	/* out of memory? */
 		return false;
-- 
2.13.3

